enunciados gaaaaaaaaa

1.py
def generar_codigo(apellido, fecha_nacimiento):
    # Formato de fecha: "DD/MM/AAAA"
    partes_fecha = fecha_nacimiento.split("/")
    mes = partes_fecha[1]
    anio = partes_fecha[2]
    
    # Tomar hasta 4 letras del apellido
    parte_apellido = apellido[:4]
    
    # Si el apellido tiene menos de 4 letras, se usa completo
    if len(apellido) < 4:
        parte_apellido = apellido

    # Tomar los 2 dígitos del mes y los 2 del medio del año
    codigo = f"{parte_apellido}{mes}{anio[1:3]}"
    return codigo

# Ejemplo
apellido = input("Ingrese su apellido: ")
fecha = input("Ingrese su fecha de nacimiento (DD/MM/AAAA): ")
print("Código generado:", generar_codigo(apellido, fecha))


2.py
def filtrar_nombres_por_ultima_letra(nombres):
    if not nombres:
        return []
    
    letra_final = nombres[-1][-1].lower()  # Última letra del último nombre
    return [nombre for nombre in nombres if nombre[-1].lower() == letra_final]

# Ejemplo
n = int(input("¿Cuántos nombres ingresará?: "))
nombres = [input(f"Ingrese nombre {i+1}: ") for i in range(n)]
resultado = filtrar_nombres_por_ultima_letra(nombres)
print("Nombres que cumplen la condición:", resultado)


3.py
def suma_y_resta(a, b):
    suma = a + b
    resta = a - b
    return suma, resta

# Solicitar números al usuario
num1 = float(input("Ingrese el primer número: "))
num2 = float(input("Ingrese el segundo número: "))

# Llamar a la función
suma, resta = suma_y_resta(num1, num2)

# Mostrar resultados
print(f"Suma: {suma}")
print(f"Resta: {resta}")


4.py
class Examen:
    def __init__(self, nombre, nota):
        self.nombre = nombre
        self.nota = nota

    def aprobado(self):
        return self.nota >= 10.5

# Solicitar datos
nombre = input("Ingrese el nombre del estudiante: ")
nota = float(input("Ingrese la nota del estudiante: "))

# Crear objeto Examen
examen = Examen(nombre, nota)

# Mostrar si aprobó o no
if examen.aprobado():
    print(f"{nombre} aprobó el examen.")
else:
    print(f"{nombre} no aprobó el examen.")
